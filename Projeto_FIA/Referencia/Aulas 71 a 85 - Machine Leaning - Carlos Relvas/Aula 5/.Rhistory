for(i in 1:folds){
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=df_cv[df_cv$fold != i,])
prob <- predict(fit, newdata=df_cv[df_cv$fold == i,], type='response')
metrics <- prediction(prob, df_cv[df_cv$fold == i,target])
perf <- performance(metrics, measure="auc")
AUC[i] = perf@y.values
}
return(AUC)
}
formula <- paste0("Class ~ ",
paste0(c(names(df_train)[c(2:6,8:10)], 'Bare_Nuclei_imp'),
collapse = '+'))
AUCS <- cv_imp(df_train,
formula,
10, 'Class')
hist(unlist(AUCS))
AUCS <- cv_imp(df_train,
formula,
10, 'Class')
formula
AUCS <- cv_imp(df_train,
formula,
10, 'Class')
any(is.na(df_train$Class))
formula <- paste0("Class ~ ",
paste0(c(names(df_train)[c(2:6,8:10)]),
collapse = '+'))
AUCS <- cv_imp(df_train,
formula,
10, 'Class')
formula
any(is.na(df[,c(names(df_train)[c(2:6,8:10)])]))
formula <- paste0("Class ~ ",
paste0(c(names(df_train)[c(2:6,8:10)]),
collapse = '+'))
AUCS <- cv_imp(df_train,
formula,
10, 'Class')
df <- read.csv('cancer.data.txt', header = F)
names(df) <- c('Id', 'Clump_Thick','Cell_Size', 'Cell_Shape',
'Marginal_Adhesion', 'Epi_Cell_Size', 'Bare_Nuclei',
'Bland_Chromatin', 'Normal_Nucleoli', 'Mitoses', 'Class')
df[df$Bare_Nuclei=='?','Bare_Nuclei'] = NA
for(i in names(df)){
df[,i] <- as.numeric(df[,i])
}
set.seed(42)
id <- sample(1:nrow(df), 0.7*nrow(df))
df_train <- df[id,]
df_test <- df[-id,]
cv_imp <- function(df, formula_model,
folds, target){
id_perm <- sample(1:nrow(df), nrow(df))
df_cv <- df[id_perm,]
fold_size <- floor(nrow(df)/folds)
ini <- 1
end <- fold_size
for(i in 1:folds){
df_cv[ini:(min(end, nrow(df_cv))),'fold'] <- i
ini <- end+1
end <- end+fold_size
}
AUC <- array()
for(i in 1:folds){
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=df_cv[df_cv$fold != i,])
prob <- predict(fit, newdata=df_cv[df_cv$fold == i,], type='response')
metrics <- prediction(prob, df_cv[df_cv$fold == i,target])
perf <- performance(metrics, measure="auc")
AUC[i] = perf@y.values
}
return(AUC)
}
formula <- paste0("Class ~ ",
paste0(c(names(df_train)[c(2:6,8:10)]),
collapse = '+'))
AUCS <- cv_imp(df_train,
formula,
10, 'Class')
df <- df_train
formula_model = formula
folds=10
target='Class'
id_perm <- sample(1:nrow(df), nrow(df))
df_cv <- df[id_perm,]
fold_size <- floor(nrow(df)/folds)
ini <- 1
end <- fold_size
for(i in 1:folds){
df_cv[ini:(min(end, nrow(df_cv))),'fold'] <- i
ini <- end+1
end <- end+fold_size
}
AUC <- array()
for(i in 1:folds){
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=df_cv[df_cv$fold != i,])
prob <- predict(fit, newdata=df_cv[df_cv$fold == i,], type='response')
metrics <- prediction(prob, df_cv[df_cv$fold == i,target])
perf <- performance(metrics, measure="auc")
AUC[i] = perf@y.values
}
i
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=df_cv[df_cv$fold != i,])
any(is.na(f_cv[df_cv$fold != i,]))
any(is.na(f_cv[ddf_cv$fold != i,]))
any(is.na(df_cv[df_cv$fold != i,]))
any(is.na(model.matrix(formula_model, df_cv[df_cv$fold != i,])))
model.matrix(as.formula(formula_model), data=df_cv[df_cv$fold != i,])
is.na(model.matrix(as.formula(formula_model), data=df_cv[df_cv$fold != i,]))
sum(is.na(model.matrix(as.formula(formula_model), data=df_cv[df_cv$fold != i,])))
fit <- randomForest(as.formula(formula_model), data=df_cv[df_cv$fold != i,])
fit <- randomForest(as.formula(formula_model), data=na.omit(df_cv[df_cv$fold != i,]))
cv_imp <- function(df, formula_model,
folds, target){
id_perm <- sample(1:nrow(df), nrow(df))
df_cv <- df[id_perm,]
fold_size <- floor(nrow(df)/folds)
ini <- 1
end <- fold_size
for(i in 1:folds){
df_cv[ini:(min(end, nrow(df_cv))),'fold'] <- i
ini <- end+1
end <- end+fold_size
}
AUC <- array()
for(i in 1:folds){
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=na.omit(df_cv[df_cv$fold != i,]))
prob <- predict(fit, newdata=df_cv[df_cv$fold == i,], type='response')
metrics <- prediction(prob, df_cv[df_cv$fold == i,target])
perf <- performance(metrics, measure="auc")
AUC[i] = perf@y.values
}
return(AUC)
}
formula <- paste0("as.factor(Class) ~ ",
paste0(c(names(df_train)[c(2:6,8:10)]),
collapse = '+'))
AUCS <- cv_imp(df_train,
formula,
10, 'Class')
cv_imp <- function(df, formula_model,
folds, target){
id_perm <- sample(1:nrow(df), nrow(df))
df_cv <- df[id_perm,]
fold_size <- floor(nrow(df)/folds)
ini <- 1
end <- fold_size
for(i in 1:folds){
df_cv[ini:(min(end, nrow(df_cv))),'fold'] <- i
ini <- end+1
end <- end+fold_size
}
AUC <- array()
for(i in 1:folds){
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=na.omit(df_cv[df_cv$fold != i,]))
prob <- predict(fit, newdata=df_cv[df_cv$fold == i,], type='response')
metrics <- prediction(prob, as.factor(df_cv[df_cv$fold == i,target]))
perf <- performance(metrics, measure="auc")
AUC[i] = perf@y.values
}
return(AUC)
}
formula <- paste0("as.factor(Class) ~ ",
paste0(c(names(df_train)[c(2:6,8:10)]),
collapse = '+'))
AUCS <- cv_imp(df_train,
formula,
10, 'Class')
cv_imp <- function(df, formula_model,
folds, target){
id_perm <- sample(1:nrow(df), nrow(df))
df_cv <- df[id_perm,]
fold_size <- floor(nrow(df)/folds)
ini <- 1
end <- fold_size
for(i in 1:folds){
df_cv[ini:(min(end, nrow(df_cv))),'fold'] <- i
ini <- end+1
end <- end+fold_size
}
AUC <- array()
for(i in 1:folds){
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=na.omit(df_cv[df_cv$fold != i,]))
prob <- predict(fit, newdata=df_cv[df_cv$fold == i,], type='response')
metrics <- prediction(prob, df_cv[df_cv$fold == i,target])
perf <- performance(metrics, measure="auc")
AUC[i] = perf@y.values
}
return(AUC)
}
formula <- paste0("as.factor(Class) ~ ",
paste0(c(names(df_train)[c(2:6,8:10)], 'Bare_Nuclei_imp'),
collapse = '+'))
AUCS <- cv_imp(df_train,
formula,
10, 'Class')
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=na.omit(df_cv[df_cv$fold != i,]))
prob <- predict(fit, newdata=df_cv[df_cv$fold == i,], type='response')
prob
df <- read.csv('cancer.data.txt', header = F)
names(df) <- c('Id', 'Clump_Thick','Cell_Size', 'Cell_Shape',
'Marginal_Adhesion', 'Epi_Cell_Size', 'Bare_Nuclei',
'Bland_Chromatin', 'Normal_Nucleoli', 'Mitoses', 'Class')
df[df$Bare_Nuclei=='?','Bare_Nuclei'] = NA
for(i in names(df)){
df[,i] <- as.numeric(df[,i])
}
set.seed(42)
id <- sample(1:nrow(df), 0.7*nrow(df))
df_train <- df[id,]
df_test <- df[-id,]
df <- read.csv('cancer.data.txt', header = F)
names(df) <- c('Id', 'Clump_Thick','Cell_Size', 'Cell_Shape',
'Marginal_Adhesion', 'Epi_Cell_Size', 'Bare_Nuclei',
'Bland_Chromatin', 'Normal_Nucleoli', 'Mitoses', 'Class')
df[df$Bare_Nuclei=='?','Bare_Nuclei'] = NA
for(i in names(df)){
df[,i] <- as.numeric(df[,i])
}
df[,"Class"] <- as.factor(df[,"Class"])
set.seed(42)
id <- sample(1:nrow(df), 0.7*nrow(df))
df_train <- df[id,]
df_test <- df[-id,]
formula_cv <- paste0("Class ~ ",
paste0(c(names(df_train)[c(2:6,8:10)], 'Bare_Nuclei_imp'),
collapse = '+'))
AUCS <- cv_imp(df_train,
formula_cv,
10, 'Class')
formula_model<-formula_cv
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=na.omit(df_cv[df_cv$fold != i,]))
df_cv= df_train
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=na.omit(df_cv[df_cv$fold != i,]))
table(df_cv$Class)
df_cv[df_cv$fold != i,]
i
i=1
fit <- randomForest(as.formula(formula_model), data=na.omit(df_cv[df_cv$fold != i,]))
df_cv[df_cv$fold != i,]
i
df$fo
id_perm <- sample(1:nrow(df), nrow(df))
df_cv <- df[id_perm,]
df <- read.csv('cancer.data.txt', header = F)
names(df) <- c('Id', 'Clump_Thick','Cell_Size', 'Cell_Shape',
'Marginal_Adhesion', 'Epi_Cell_Size', 'Bare_Nuclei',
'Bland_Chromatin', 'Normal_Nucleoli', 'Mitoses', 'Class')
df[df$Bare_Nuclei=='?','Bare_Nuclei'] = NA
for(i in names(df)){
df[,i] <- as.numeric(df[,i])
}
df[,"Class"] <- as.factor(df[,"Class"])
set.seed(42)
id <- sample(1:nrow(df), 0.7*nrow(df))
df_train <- df[id,]
df_test <- df[-id,]
df = df_train
id_perm <- sample(1:nrow(df), nrow(df))
df_cv <- df[id_perm,]
fold_size <- floor(nrow(df)/folds)
ini <- 1
end <- fold_size
for(i in 1:folds){
df_cv[ini:(min(end, nrow(df_cv))),'fold'] <- i
ini <- end+1
end <- end+fold_size
}
AUC <- array()
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=na.omit(df_cv[df_cv$fold != i,]))
prob <- predict(fit, newdata=df_cv[df_cv$fold == i,], type='response')
metrics <- prediction(prob, df_cv[df_cv$fold == i,target])
prob
fit <- randomForest(as.formula(formula_model), data=df_cv[df_cv$fold != i,])
df_cv[df_cv$fold == i,]
df <- read.csv('cancer.data.txt', header = F)
df
tail(df)
names(df) <- c('Id', 'Clump_Thick','Cell_Size', 'Cell_Shape',
'Marginal_Adhesion', 'Epi_Cell_Size', 'Bare_Nuclei',
'Bland_Chromatin', 'Normal_Nucleoli', 'Mitoses', 'Class')
df[df$Bare_Nuclei=='?','Bare_Nuclei'] = NA
for(i in names(df)){
df[,i] <- as.numeric(df[,i])
}
df[,"Class"] <- as.factor(df[,"Class"])
set.seed(42)
id <- sample(1:nrow(df), 0.7*nrow(df))
df_train <- df[id,]
df_test <- df[-id,]
id
cv_imp <- function(df, formula_model,
folds, target){
id_perm <- sample(1:nrow(df), nrow(df))
df_cv <- df[id_perm,]
fold_size <- floor(nrow(df)/folds)
ini <- 1
end <- fold_size
for(i in 1:folds){
df_cv[ini:(min(end, nrow(df_cv))),'fold'] <- i
ini <- end+1
end <- end+fold_size
}
AUC <- array()
for(i in 1:folds){
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=df_cv[df_cv$fold != i,])
prob <- predict(fit, newdata=df_cv[df_cv$fold == i,], type='response')
metrics <- prediction(prob, df_cv[df_cv$fold == i,target])
perf <- performance(metrics, measure="auc")
AUC[i] = perf@y.values
}
return(AUC)
}
formula_cv <- paste0("Class ~ ",
paste0(c(names(df_train)[c(2:6,8:10)], 'Bare_Nuclei_imp'),
collapse = '+'))
AUCS <- cv_imp(df_train,
formula_cv,
10, 'Class')
cv_imp <- function(df_cross, formula_model,
folds, target){
id_perm <- sample(1:nrow(df_cross), nrow(df_cross))
df_cv <- df_cross[id_perm,]
fold_size <- floor(nrow(df_cross)/folds)
ini <- 1
end <- fold_size
for(i in 1:folds){
df_cv[ini:(min(end, nrow(df_cv))),'fold'] <- i
ini <- end+1
end <- end+fold_size
}
AUC <- array()
for(i in 1:folds){
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=df_cv[df_cv$fold != i,])
prob <- predict(fit, newdata=df_cv[df_cv$fold == i,], type='response')
metrics <- prediction(prob, df_cv[df_cv$fold == i,target])
perf <- performance(metrics, measure="auc")
AUC[i] = perf@y.values
}
return(AUC)
}
formula_cv <- paste0("Class ~ ",
paste0(c(names(df_train)[c(2:6,8:10)], 'Bare_Nuclei_imp'),
collapse = '+'))
AUCS <- cv_imp(df_train,
formula_cv,
10, 'Class')
dim(df_train)
tail(df_train)
df_cross <- df_train
id_perm <- sample(1:nrow(df_cross), nrow(df_cross))
id_perm
df_cv <- df_cross[id_perm,]
fold_size <- floor(nrow(df_cross)/folds)
ini <- 1
end <- fold_size
fold_size
for(i in 1:folds){
df_cv[ini:(min(end, nrow(df_cv))),'fold'] <- i
ini <- end+1
end <- end+fold_size
}
df_cv
tail(df_cv)
folds
fold_size
fold_size <- round(nrow(df_cross)/folds)+1
fold_size
fold_size <- round(nrow(df_cross)/folds)
fold_size
ini <- 1
end <- fold_size
for(i in 1:folds){
df_cv[ini:(min(end, nrow(df_cv))),'fold'] <- i
ini <- end+1
end <- end+fold_size
}
AUC <- array()
for(i in 1:folds){
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=df_cv[df_cv$fold != i,])
prob <- predict(fit, newdata=df_cv[df_cv$fold == i,], type='response')
metrics <- prediction(prob, df_cv[df_cv$fold == i,target])
perf <- performance(metrics, measure="auc")
AUC[i] = perf@y.values
}
prob
prob <- predict(fit, newdata=df_cv[df_cv$fold == i,], type='prob')[,2]
metrics <- prediction(prob, df_cv[df_cv$fold == i,target])
perf <- performance(metrics, measure="auc")
AUC[i] = perf@y.values
AUC
cv_imp <- function(df_cross, formula_model,
folds, target){
id_perm <- sample(1:nrow(df_cross), nrow(df_cross))
df_cv <- df_cross[id_perm,]
fold_size <- round(nrow(df_cross)/folds)
ini <- 1
end <- fold_size
for(i in 1:folds){
df_cv[ini:(min(end, nrow(df_cv))),'fold'] <- i
ini <- end+1
end <- end+fold_size
}
AUC <- array()
for(i in 1:folds){
df_cv[,'Bare_Nuclei_imp'] <- df_cv[,'Bare_Nuclei']
df_cv[is.na(df_cv$Bare_Nuclei),'Bare_Nuclei_imp'] <- median(df_cv[df_cv$fold != i,
'Bare_Nuclei'], na.rm=T)
fit <- randomForest(as.formula(formula_model), data=df_cv[df_cv$fold != i,])
prob <- predict(fit, newdata=df_cv[df_cv$fold == i,], type='prob')[,2]
metrics <- prediction(prob, df_cv[df_cv$fold == i,target])
perf <- performance(metrics, measure="auc")
AUC[i] = perf@y.values
}
return(AUC)
}
formula_cv <- paste0("Class ~ ",
paste0(c(names(df_train)[c(2:6,8:10)], 'Bare_Nuclei_imp'),
collapse = '+'))
AUCS <- cv_imp(df_train,
formula_cv,
10, 'Class')
hist(unlist(AUCS))
mean(unlist(AUCS))
df <- read.csv('cancer.data.txt', header = F)
names(df) <- c('Id', 'Clump_Thick','Cell_Size', 'Cell_Shape',
'Marginal_Adhesion', 'Epi_Cell_Size', 'Bare_Nuclei',
'Bland_Chromatin', 'Normal_Nucleoli', 'Mitoses', 'Class')
df[df$Bare_Nuclei=='?','Bare_Nuclei'] = NA
for(i in names(df)){
df[,i] <- as.numeric(df[,i])
}
library(caret)
featurePlot(x = df[, c('Clump_Thick','Cell_Size', 'Cell_Shape',
'Marginal_Adhesion', 'Epi_Cell_Size', 'Bare_Nuclei',
'Bland_Chromatin', 'Normal_Nucleoli', 'Mitoses')],
y = as.factor(df$Class),
plot = "pairs", auto.key = list(columns = 2))
featurePlot(x = df[, c('Clump_Thick','Cell_Size', 'Cell_Shape',
'Marginal_Adhesion', 'Epi_Cell_Size', 'Bare_Nuclei',
'Bland_Chromatin', 'Normal_Nucleoli', 'Mitoses')],
y = as.factor(df$Class), layout = c(4,1 ),
plot = "box", auto.key = list(columns = 2),
scales = list(y = list(relation="free"),
x = list(rot = 90)))
featurePlot(x = df[, c('Clump_Thick','Cell_Size', 'Cell_Shape',
'Marginal_Adhesion', 'Epi_Cell_Size', 'Bare_Nuclei',
'Bland_Chromatin', 'Normal_Nucleoli', 'Mitoses')],
y = as.factor(df$Class), layout = c(4,1 ),
plot = "density", auto.key = list(columns = 2),
scales = list(y = list(relation="free"),
x = list(relation = "free")))
library(caret)
set.seed(1234)
inTraining <- createDataPartition(df$Class, p=0.7,
list=FALSE)
df_train <- df[inTraining,]
df_test <- df[-inTraining,]
aux <- df_train[,2:10]
preProcValues <- preProcess(aux,method = c("medianImpute"))
aux_imp <- predict(preProcValues, newdata=aux)
rf <- train(y=as.factor(df_train$Class),
x=aux_imp,
method = "rf",trControl = trainControl(method = "oob"),
importance = TRUE, verbose = TRUE,
tuneGrid = data.frame(mtry = 3))
varImp(rf)
aux_val <- df_test[,2:10]
pre_val <- predict(preProcValues, newdata=aux_val)
pred_var <- predict(rf, newdata = pre_val)
confusionMatrix(pred_var, df_test$Class)
