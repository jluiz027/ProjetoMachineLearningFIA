paste0(vars_num, collapse = "+"), "+",
paste0('as.factor(', vars_categ, ")", collapse = "+"))
fit <- ctree(as.formula(formula), data=df_train,
controls = ctree_control(maxdepth = 3))
plot(fit)
diag(df_train$target, unlist(lapply(predict(fit, newdata=df_train, type='prob'),
function(x) x[[2]])))
diag(df_val$target, unlist(lapply(predict(fit, newdata=df_val, type='prob'),
function(x) x[[2]])))
aucs <- matrix(nr=9*3*3, nc=4)
cont <- 1
for(d in 2:10){
for(b in c(3,7,10)){
for(s in c(50,20,10)){
fit <- ctree(as.formula(formula), data=df_train,
controls = ctree_control(maxdepth = d, minsplit = s, minbucket = b))
aucs[cont,1] <- d
aucs[cont,2] <- b
aucs[cont,3] <- s
aucs[cont,4] <- diag(df_val$target, unlist(lapply(predict(fit, newdata=df_val, type='prob'),
function(x) x[[2]])))
cont <- cont+1
}
}
}
aucs[which.max(aucs[,4]),]
fit <- ctree(as.formula(formula), data=df_train,
controls = ctree_control(maxdepth = 5, minsplit = 20, minbucket = 3))
diag(df_train$target, unlist(lapply(predict(fit, newdata=df_train, type='prob'),
function(x) x[[2]])))
diag(df_val$target, unlist(lapply(predict(fit, newdata=df_val, type='prob'),
function(x) x[[2]])))
diag(df_test$target, unlist(lapply(predict(fit, newdata=df_test, type='prob'),
function(x) x[[2]])))
df_test[,"credit_limit_imp"] <- as.numeric(df_test[,"credit_limit_imp"])
str(df_train[,vars_num])
str(df_test[,vars_num])
df_test[,"credit_limit_imp999"] <- as.numeric(df_test[,"credit_limit_imp999"])
diag(df_test$target, unlist(lapply(predict(fit, newdata=df_test, type='prob'),
function(x) x[[2]])))
library(party)
df_train <- read.csv('train_dataset.csv')
df_val <- read.csv('val_dataset.csv')
df_test <- read.csv('test_dataset.csv')
vars_categ <- c("score_1","sign","gender",
"facebook_profile","channel","zip_transf",
"score_2_transf","real_state_transf","state_transf")
vars_num <- c("score_3","score_4","score_5",
"score_6","risk_rate","amount_borrowed",
"borrowed_in_months","credit_limit","income",
"ok_since","n_bankruptcies","n_defaulted_loans",
"n_accounts","n_issues")
vars_num_regression <- paste0(vars_num, sep="_imp")
formula <- paste0("as.factor(target)~",
paste0(vars_num_regression, collapse = "+"), "+",
paste0(vars_categ, collapse = "+"))
library(randomForest)
fit <- randomForest(as.formula(formula), data=df_train, ntree=200)
plot(fit)
diag(df_train$target, predict(fit, newdata=df_train, type='prob')[,2])
diag(df_val$target, predict(fit, newdata=df_val, type='prob')[,2])
diag(df_test$target, predict(fit, newdata=df_test, type='prob')[,2])
aucs <- matrix(nr=6, nc=2)
cont <- 1
for(m in c(1, 5, 10, 15, 20, 22)){
fit <- randomForest(as.formula(formula), data=df_train, ntree=200, mtry=m)
aucs[cont,1] <- m
aucs[cont,2] <- diag(df_val$target, predict(fit, newdata=df_val, type='prob')[,2])
cont <- cont+1
}
aucs <- matrix(nr=7, nc=2)
cont <- 1
for(m in c(1, 3, 5, 7, 9, 10, 20)){
fit <- randomForest(as.formula(formula), data=df_train, ntree=200, mtry=m)
aucs[cont,1] <- m
aucs[cont,2] <- diag(df_val$target, predict(fit, newdata=df_val, type='prob')[,2])
cont <- cont+1
}
aucs[which.max(aucs[,2]),]
fit <- randomForest(as.formula(formula), data=df_train, ntree=200, mtry=3)
diag(df_train$target, predict(fit, newdata=df_train, type='prob')[,2])
diag(df_val$target, predict(fit, newdata=df_val, type='prob')[,2])
diag(df_test$target, predict(fit, newdata=df_test, type='prob')[,2])
plot(fit)
fit$importance
plot(fit$importance)
fit$importance
barplot(sort(fit$importance))
barplot(sort(fit$importance, decreasing = T))
sort(fit$importance, decreasing = T)
fit$importance
vars_categ <- c("score_1","sign","gender",
"facebook_profile","zip_transf",
"score_2_transf","real_state_transf","state_transf")
vars_num <- c("score_3","score_4","score_5",
"score_6","risk_rate","amount_borrowed",
"borrowed_in_months","credit_limit","income",
"ok_since",
"n_accounts","n_issues")
vars_num_regression <- paste0(vars_num, sep="_imp")
formula <- paste0("as.factor(target)~",
paste0(vars_num_regression, collapse = "+"), "+",
paste0(vars_categ, collapse = "+"))
fit <- randomForest(as.formula(formula), data=df_train, ntree=200, mtry=3)
plot(fit)
diag(df_train$target, predict(fit, newdata=df_train, type='prob')[,2])
diag(df_val$target, predict(fit, newdata=df_val, type='prob')[,2])
diag(df_test$target, predict(fit, newdata=df_test, type='prob')[,2])
vars_categ <- c("score_1","sign","gender",
"facebook_profile","channel","zip_transf",
"score_2_transf","real_state_transf","state_transf")
vars_num <- c("score_3","score_4","score_5",
"score_6","risk_rate","amount_borrowed",
"borrowed_in_months","credit_limit","income",
"ok_since","n_bankruptcies","n_defaulted_loans",
"n_accounts","n_issues")
vars_num_regression <- paste0(vars_num, sep="_imp999")
formula <- paste0("as.factor(target)~",
paste0(vars_num_regression, collapse = "+"), "+",
paste0(vars_categ, collapse = "+"))
aucs <- matrix(nr=7, nc=2)
cont <- 1
for(m in c(1, 3, 5, 7, 9, 10, 20)){
fit <- randomForest(as.formula(formula), data=df_train, ntree=200, mtry=m)
aucs[cont,1] <- m
aucs[cont,2] <- diag(df_val$target, predict(fit, newdata=df_val, type='prob')[,2])
cont <- cont+1
}
aucs[which.max(aucs[,2]),]
fit <- randomForest(as.formula(formula), data=df_train, ntree=200, mtry=3)
plot(fit)
diag(df_train$target, predict(fit, newdata=df_train, type='prob')[,2])
diag(df_val$target, predict(fit, newdata=df_val, type='prob')[,2])
diag(df_test$target, predict(fit, newdata=df_test, type='prob')[,2])
fit$importance
barplot(sort(fit$importance, decreasing = T))
vars_categ <- c("score_1","sign","gender",
"facebook_profile","zip_transf",
"score_2_transf","real_state_transf","state_transf")
vars_num <- c("score_3","score_4","score_5",
"score_6","risk_rate","amount_borrowed",
"borrowed_in_months","credit_limit","income",
"ok_since",
"n_accounts","n_issues")
vars_num_regression <- paste0(vars_num, sep="_imp999")
formula <- paste0("as.factor(target)~",
paste0(vars_num_regression, collapse = "+"), "+",
paste0(vars_categ, collapse = "+"))
fit <- randomForest(as.formula(formula), data=df_train, ntree=200, mtry=3)
plot(fit)
diag(df_train$target, predict(fit, newdata=df_train, type='prob')[,2])
diag(df_val$target, predict(fit, newdata=df_val, type='prob')[,2])
diag(df_test$target, predict(fit, newdata=df_test, type='prob')[,2])
df <- read.csv("/Users/carlos/Downloads/var_effect.csv")
df[,'pval2'] <- 1-pchisq(2*(df[,6]-df[,7]), 60)
View(df)
View(df)
mean(df[,5])
mean(df[1:20,5])
mean(df[21:40,5])
mean(df[41:60,5])
mean(df[61:80,5])
mean(df[81:100,5])
mean(df[101:120,5])
sum(df[1:20,5]<=0.05)/20
sum(df[21:40,5]<=0.05)/20
sum(df[41:60,5]<=0.05)/20
sum(df[61:80,5]<=0.05)/20
sum(df[81:100,5]<=0.05)/20
sum(df[101:120,5]<=0.05)/20
mean(df[1:20,8])
mean(df[21:40,8])
mean(df[41:60,8])
mean(df[61:80,8])
mean(df[81:100,8])
mean(df[101:120,8])
sum(df[1:20,8]<=0.05)/20
sum(df[21:40,8]<=0.05)/20
sum(df[41:60,8]<=0.05)/20
sum(df[61:80,8]<=0.05)/20
sum(df[81:100,8]<=0.05)/20
sum(df[101:120,8]<=0.05)/20
setwd("/Users/carlos/Downloads/")
library(ROCR)
library(xgboost)
library(ggplot2)
library(caret)
library(e1071)
library(OptimalCutpoints)
library(irr)
library(gam)
modelPerf <- function(model, data, targetVariable, kind = 'usual', ...){
if(!(kind%in%c('RF','SVM'))) {
score<-predict(model, newdata = data, ...)
} else {
if(kind=='RF') score<-predict(model, newdata = data, type='prob')[,1]
if(kind=='SVM') score<-predict(model, newdata = data, type='prob')[,1]
}
if (length(targetVariable)==1){
pred <- ROCR::prediction(score, data[, targetVariable])
}else{
pred<-ROCR::prediction(score, targetVariable)
}
perf <- try(ROCR::performance(pred,"tpr","fpr"),silent = T)
if (class(perf)=="try-error"){
return(list(perf = c('KS' = 0, 'GINI' = 0, 'AUC' = 0), ROC = NA))
}else{
ks <- max(attr(perf,'y.values')[[1]]-attr(perf,'x.values')[[1]])
AUC <- attr(ROCR::performance(pred,"auc"), 'y.values')[[1]]
gini <- 2*AUC - 1
ROC <- data.frame(x = attr(perf,'x.values')[[1]], y = attr(perf,'y.values')[[1]])
return(list(perf = c('KS' = ks, 'GINI' = gini, 'AUC' = AUC), ROC = ROC))
}
}
modelPerfProb <- function(score, data, targetVariable){
if (length(targetVariable)==1){
pred <- ROCR::prediction(score, data[, targetVariable])
}else{
pred<-ROCR::prediction(score, targetVariable)
}
perf <- try(ROCR::performance(pred,"tpr","fpr"),silent = T)
if (class(perf)=="try-error"){
return(list(perf = c('KS' = 0, 'GINI' = 0, 'AUC' = 0), ROC = NA))
}else{
ks <- max(attr(perf,'y.values')[[1]]-attr(perf,'x.values')[[1]])
AUC <- attr(ROCR::performance(pred,"auc"), 'y.values')[[1]]
gini <- 2*AUC - 1
ROC <- data.frame(x = attr(perf,'x.values')[[1]], y = attr(perf,'y.values')[[1]])
return(list(perf = c('KS' = ks, 'GINI' = gini, 'AUC' = AUC), ROC = ROC))
}
}
dataRMI <- read.table("all_csv_chave.csv",
sep = ",",header = T, stringsAsFactors=FALSE)
dataRMI <- dataRMI[!is.na(dataRMI$Lote),]
dataRMI <- dataRMI[!duplicated(dataRMI[,c("Biomedica","ChaveUnica" )]),]
dataRMI[,'key'] <- paste0(dataRMI$Biomedica, "-", dataRMI$ChaveUnica)
sum(duplicated(dataRMI[,c("key")]))
dataRMI[,'Lote_categ'] <- ifelse(dataRMI$Lote <= 30, "<=30",">30")
dataRMI[,'experience'] <- ifelse(dataRMI$Biomedica %in% c("Ana", "Wandi"),
"Senior",
ifelse(dataRMI$Biomedica
%in% c("Bruna", "Milena",
"Camila", "Vanessa"),
"Pleno",
"Junior"))
aggdata <-aggregate(dataRMI$Output, by=list(dataRMI$Biomedica,
dataRMI$Slice),
FUN=mean, na.rm=TRUE)
aggdata_mat <- matrix(nr=length(unique(dataRMI$Biomedica)),
nc=length(unique(dataRMI$Slice)))
rownames(aggdata_mat) <- unique(dataRMI$Biomedica)
colnames(aggdata_mat) <- unique(dataRMI$Slice)
for(i in unique(dataRMI$Biomedica)){
for(j in as.character(unique(dataRMI$Slice))){
aggdata_mat[i,j] <- aggdata[((aggdata[,1]==i) & (aggdata[,2]==j)),3]
}
}
kripp.alpha(aggdata_mat,"interval")
summary(dataRMI)
countVars <- sapply(dataRMI,function(x) length(unique(x)))
varsTotal <- names(countVars)[countVars>1]
targetVariable <- "Output"
modelVars <- varsTotal[-which(varsTotal %in% c(targetVariable,"ID","Lote","Field","Bore","BW","Brand","Coil","Lote_categ","Biomedica","Sm_CIR", "Max1_IN", "Min1_IN","S_CIR","N_CIR", "Max1_OUT", "Min1_OUT","Real_size", "Edge", "Max2_IN", "Min2_IN","Sm_CIR","Max2_OUT","Min2_OUT","Ring","Sm_IN","Ghost","Sm_OTU"))]
dataRMI <- dataRMI[,varsTotal]
dataRMI_SENIORS <- dataRMI[dataRMI$experience=='Senior',]
base_cor <-apply(dataRMI_SENIORS, 2, as.numeric)
correlationMatrix <- cor(base_cor[,1:29])
print(correlationMatrix)
set.seed(42)
id <- sample(1:nrow(dataRMI_SENIORS), 0.7*nrow(dataRMI_SENIORS))
set.seed(42)
id <- sample(1:nrow(dataRMI_SENIORS), 0.7*nrow(dataRMI_SENIORS))
train <- dataRMI_SENIORS[id,]
test <- dataRMI_SENIORS[-id,]
test_all <-  dataRMI[dataRMI$experience!='Senior',]
for(i in c("Biomedica","Brand","Bore","Coil",'Slice', 'Radius', 'Position')){
train[,i] <- as.factor(train[,i])
test[,i] <- as.factor(test[,i])
test_all[,i] <- as.factor(test_all[,i])
}
to_train <- train
to_test <- test
to_test_all <- test_all
feature.names=names(to_train)
to_train[,'Output'] <- as.factor(to_train[,'Output'])
to_test[,'Output'] <- as.factor(to_test[,'Output'])
to_test_all[,'Output'] <- as.factor(to_test_all[,'Output'])
for (f in feature.names[feature.names!="Biomedica"]) {
if (class(to_train[[f]])=="factor") {
levels <- unique(c(train[,f]))
to_train[,f] <- factor(to_train[,f],
labels=make.names(levels))
to_test[,f] <- factor(to_test[,f],
labels=make.names(levels))
to_test_all[,f] <- factor(to_test_all[,f],
labels=make.names(levels))
}
}
modelVars <- modelVars[-length(modelVars)]
modelVars
modelVars
modelVars <- modelVars[1:8]
modelVars
min.model = glm(paste0(targetVariable," ~ 1"), data=train, family = binomial())
biggest <- formula(glm(paste0("as.factor(",targetVariable , ")~", paste(modelVars,collapse="+")),data = train, family = binomial()))
fwd.model = step(min.model, direction='forward', scope=biggest)
logisticModel <- fwd.model
perfTrain <- modelPerf(logisticModel, train, targetVariable,type ="response")
perfTest <- modelPerf(logisticModel, test, targetVariable,type ="response")
perfTestAll <- modelPerf(logisticModel, test_all, targetVariable,type ="response")
perfTable <- rbind(c('dataset' = 'train',perfTrain$perf), c('dataset' = 'test',perfTest$perf))
perfTable <- rbind(c('dataset' = 'train',perfTrain$perf),
c('dataset' = 'test',perfTest$perf),
c('dataset' = 'testAll',perfTestAll$perf))
perfTable
ggplot(perfTrain$ROC, aes(x = x , y = y)) +
geom_line(aes(colour="black")) +
geom_line(data = perfTest$ROC, aes(x = x , y = y,colour="red")) +
xlab("FPR") + ylab("TPR") + ggtitle("ROC Curve") +
scale_colour_manual(name = NULL,
values =c('black'='black','red'='red'),
labels = c('train','test'))
varImp(logisticModel)
perfTrain
perfTrain$perf
perfTrain$perf$AUC
perfTrain$perf[3]
allBio <- rbind(test, test_all)
biomedicas <- unique(dataRMI$Biomedica)
biomedicas
for(i in biomedicas){
perf <- modelPerf(logisticModel, allBio[allBio$Biomedica==i,],
targetVariable,type ="response")
print(i)
print(perf)
}
for(i in biomedicas){
perf <- modelPerf(logisticModel, allBio[allBio$Biomedica==i,],
targetVariable,type ="response")
print(i)
print(perf$perf)
}
niveis <- unique(dataRMI$experience)
for(i in niveis){
perf <- modelPerf(logisticModel, allBio[allBio$experience==i,],
targetVariable,type ="response")
print(i)
print(perf$perf)
}
varImp(logisticModel)
final_features <- attr(logisticModel$terms , "term.labels")
train_control <- trainControl(method="cv", number=10,
classProbs=TRUE, summaryFunction=twoClassSummary)
final_formula <- paste0("as.factor(",targetVariable , ")~", paste(final_features[-i],collapse="+"))
final_features
train_control
final_formula
final_formula <- paste0("as.factor(",targetVariable , ")~",
paste(final_features,collapse="+"))
final_formula
model <- train(as.formula(final_formula), data=to_train, trControl=train_control,
method="glm", family="binomial", metric="ROC")
print(model)
print(model$resample)
print(paste0(mean(model$resample$ROC), " - ", sd(model$resample$ROC)))
finalAUC = mean(model$resample$ROC)
final_features <- attr(logisticModel$terms , "term.labels")
aucs_rem_features <- array()
for(i in 1:length(final_features)){
formula_rem <- paste0("as.factor(",targetVariable , ")~", paste(final_features[-i],collapse="+"))
model <- train(as.formula(formula_rem), data=to_train, trControl=train_control,
method="glm", family="binomial", metric="ROC")
aucs_rem_features[i] <- mean(model$resample$ROC)
}
names(aucs_rem_features) <- final_features
aucs_rem_features
final_features <- attr(logisticModel$terms , "term.labels")
print(final_features)
finalAUC = mean(model$resample$ROC)
print(finalAUC)
final_features = c(final_features, "S_IN")
formula <- paste0("as.factor(",targetVariable , ")~", paste(final_features,collapse="+"))
model <- train(as.formula(formula), data=to_train, trControl=train_control,
method="glm", family="binomial", metric="ROC")
mean(model$resample$ROC)
finalAUC = mean(model$resample$ROC)
print(finalAUC)
set.seed(42)
to_train[,"aleatorio"] <- runif(nrow(to_train))
varsToAdd <- varsTotal[!(varsTotal%in%c(final_features,"experience","Output"))]
varsToAdd
varsToAdd <- varsTotal[!(varsTotal%in%c(final_features,"experience","Output","ChaveUnica","key"))]
varsToAdd
varsToAdd <- c(varsToAdd, "aleatorio")
aucs_add_features <- array()
for(i in 1:length(varsToAdd)){
formula_add <- paste0("as.factor(",targetVariable , ")~", paste(c(final_features,varsToAdd[i]),
collapse="+"))
model <- train(as.formula(formula_add), data=to_train, trControl=train_control,
method="glm", family="binomial", metric="ROC")
aucs_add_features[i] <- mean(model$resample$ROC)
}
names(aucs_add_features) <- varsToAdd
aucs_add_features
help(foreach)
2^20
2^19
128.5*3.9
450*300+490*600
(450*300+490*600)*0.73
(450*300+490*600)*0.85
setwd("/Us")
setwd("/Users/carlos/Desktop")
setwd("/Users/carlos/Desktop/AulasHackaton/")
hist_pay = read.csv("Payment_information.csv")
table(hist_pay$bills)
hist_pay_late = hist_pay[!is.na(hist_pay$bill_atraso),]
View(hist_pay)
table(hist_pay$bills)
hist_pay_late = hist_pay[!is.na(hist_pay$bill_atraso),]
hist_pay_late = hist_pay_late[hist_pay_late$current_late==0,]
cura = array()
for(i in 1:180){
cura[i] = sum(hist_pay_late$days_late>=i)/nrow(hist_pay_late)
}
plot(cura, pch=16, xlab='Days late', ylab='Cure Rate')
hist_pay_curr_late =  hist_pay[hist_pay$current_late==1,]
hist(hist_pay_curr_late$days_late, main="Days late", xlab= 'Days Late',
breaks=15, ylab="Frequência")
hist_pay[,"mais60_late"] <- 0
hist_pay[hist_pay$days_late>=60,"mais60_late"] <- 1
table(hist_pay[hist_pay$mais60_late==1,"bill_atraso"])
table(hist_pay[,"bills"])
plot(table(hist_pay[hist_pay$mais60_late==1,"bill_atraso"]))
plot(table(hist_pay[,"bills"]))
hist_pay[,'target'] = 0
hist_pay[((hist_pay$mais60_late==1) &
(hist_pay$bills>=7) &
(hist_pay$bill_atraso<=7)),'target'] <- 1
hist_pay[hist_pay$bills<7,'target'] = NA
table(hist_pay$target, useNA = "ifany")
dados<-read.csv("consorcio.csv", sep = ";", dec = ".")
dados<-read.csv("/Users/carlos/Downloads consorcio.csv", sep = ";", dec = ".")
dados<-read.csv("/Users/carlos/Downloads/consorcio.csv", sep = ";", dec = ".")
library(randomForest)
rf <- randomForest (as.formula(“Y~ DI + FINANCIAMENTO + POUPANCA + SALARIO”), data = dados, ntree=200)
rf <- randomForest (as.formula(Y~ DI + FINANCIAMENTO + POUPANCA + SALARIO), data = dados, ntree=200)
rf <- randomForest (as.formula(as.factor(Y)~ DI + FINANCIAMENTO + POUPANCA + SALARIO), data = dados, ntree=200)
plot(rf)
predict(rf, newdata = dados)
predict(rf, newdata = dados, type=’prob’)
predict(rf, newdata = dados, type='prob')
prev1 <-dados
prev1$prevProb <- predict(rf, newdata = dados, type='prob')[,1]
head(prev1)
library(gbm)
help(gbm)
gbmFit <- gbm(as.formula(as.factor(Y)~ DI + FINANCIAMENTO + POUPANCA + SALARIO), data = dados, n.trees=200)
plot(gbmFit)
gbmFit
predict(gbmFit, newdata = dados)
predict(gbmFit, newdata = dados, n.trees=200)
gbmFit <- gbm(as.formula(as.factor(Y)~ DI + FINANCIAMENTO + POUPANCA + SALARIO), data = dados, n.trees=200)
gbmFit <- gbm(as.formula(as.factor(Y)~ DI + FINANCIAMENTO + POUPANCA + SALARIO), data = dados, n.trees=10)
predict(gbmFit, newdata = dados, n.trees=200)
gbmFit <- gbm(as.formula(Y~ DI + FINANCIAMENTO + POUPANCA + SALARIO), data = dados, n.trees=10)
predict(gbmFit, newdata = dados, n.trees=200)
gbmFit <- gbm(as.formula(Y~ DI + FINANCIAMENTO + POUPANCA + SALARIO), data = dados, n.trees=200)
predict(gbmFit, newdata = dados, n.trees=200)
predict(gbmFit, newdata = dados, type='prob', n.trees=200)
gbmFit <- gbm(as.formula(Y~ DI + FINANCIAMENTO + POUPANCA + SALARIO), data = dados, n.trees=200, distribution='bernoulli')
predict(gbmFit, newdata = dados, n.trees=200)
best.iter <- gbm.perf(gbmFit)
gbmFit <- gbm(as.formula(Y~ DI + FINANCIAMENTO + POUPANCA + SALARIO), data = dados, n.trees=500, distribution='bernoulli')
best.iter <- gbm.perf(gbmFit)
gbmFit <- gbm(as.formula(Y~ DI + FINANCIAMENTO + POUPANCA + SALARIO), data = dados, n.trees=2000, distribution='bernoulli')
best.iter <- gbm.perf(gbmFit)
gbmFit <- gbm(as.formula(Y~ DI + FINANCIAMENTO + POUPANCA + SALARIO), data = dados, n.trees=5000, distribution='bernoulli')
best.iter <- gbm.perf(gbmFit)
best.iter
predict(gbmFit, newdata = dados, n.trees=best.iter)
plot(gbmFit)
predict(gbmFit, newdata = dados, n.trees=best.iter, type='prob')
predict(gbmFit, newdata = dados, n.trees=best.iter, type='response')
predict(gbmFit, newdata = dados, n.trees=best.iter)
predict(gbmFit, newdata = dados, n.trees=best.iter, type='response')
prev1 <-dados
prev1$prevProb <- predict(rf, newdata = dados, type='response')
head(prev1)
predict(gbmFit, newdata = dados, n.trees=best.iter)
predict(gbmFit, newdata = dados, n.trees=best.iter, type='response')
prev1 <-dados
prev1$prevProb <- predict(gbmFit, newdata = dados, n.trees=best.iter, type='response')
head(prev1)
library(gam)
help(gam)
help(gam)
gam::demo()
setwd("/Users/carlos/Desktop/aulasML/Aula_ML_2018/Aula 6/")
library(MASS)
data(Boston)
df <- Boston
set.seed(42)
id_train <- sample(1:nrow(df), nrow(df)*0.70)
df_train <- df[id_train,]
df_other <- df[-id_train,]
id_val <- sample(rownames(df_other), nrow(df_other)*0.5)
df_val <- df_other[id_val,]
df_test <- df_other[setdiff(rownames(df_other),id_val),]
fit_gam <- gam(medv ~ s(crim,4) + s(rm,4) + s(age,4) + dis + s(black,3),
data=df_train)
plot(fit_gam)
